import argparse
import time
import os
import json

# THE `UTM` FUNCTION IS AN IMPLEMENTATION OF A UNIVERSAL TURING MACHINE (UTM), WHICH IS A THEORETICAL MODEL OF COMPUTATION. THIS FUNCTION TAKES SEVERAL PARAMETERS AND PERFORMS THE FOLLOWING STEPS:
# 1. **PARAMETERS**:
#    - `INSTRUCTIONS`: A SET OF TRANSITION RULES THAT DEFINE HOW THE UTM SHOULD BEHAVE. THESE RULES SPECIFY WHAT ACTION TO TAKE BASED ON THE CURRENT STATE AND SYMBOL READ FROM THE TAPE.
#    - `TAPE`: THE INITIAL CONTENT OF THE TAPE, WHICH IS A STRING REPRESENTING THE INPUT TO BE PROCESSED BY THE UTM.
#    - `START_STATE`: THE INITIAL STATE OF THE UTM WHEN IT BEGINS ITS OPERATION.
#    - `END_STATE`: THE STATE IN WHICH THE UTM SHOULD HALT ITS OPERATION.
#    - `RENDER`: A BOOLEAN FLAG INDICATING WHETHER TO DISPLAY A VISUAL REPRESENTATION OF THE UTM'S OPERATION.
#    - `SPEED`: THE RENDERING SPEED, WHICH CONTROLS THE DELAY BETWEEN STEPS WHEN RENDERING IS ENABLED.
# 2. **INSTRUCTIONS VALIDATION**:
#    THE FUNCTION STARTS BY VALIDATING THE FORMAT OF THE PROVIDED INSTRUCTIONS. IT CHECKS THAT THE INSTRUCTIONS ARE CORRECTLY STRUCTURED AND RAISE ERRORS IF THEY DON'T CONFORM TO THE EXPECTED FORMAT.
# 3. **DISPLAY FUNCTION**:
#    IF THE `RENDER` FLAG IS SET OR IF A FORCED RENDERING IS REQUESTED, THE FUNCTION DISPLAYS A HEADS-UP DISPLAY (HUD) TO PROVIDE INFORMATION ABOUT THE CURRENT STATE OF THE UTM, THE TAPE INDEX, AND THE FREQUENCY OF CHARACTERS ON THE TAPE. THIS HUD HELPS VISUALIZE THE UTM'S OPERATION.
# 4. **SIMULATION LOOP**:
#    THE CORE OF THE UTM'S OPERATION IS WITHIN A `WHILE` LOOP THAT CONTINUES UNTIL THE CURRENT STATE (`STATE`) MATCHES THE `END_STATE`, INDICATING THAT THE UTM SHOULD STOP. INSIDE THIS LOOP:
#    - THE UTM INCREMENTS A `STEPS_COUNTER` TO KEEP TRACK OF THE NUMBER OF STEPS TAKEN.
#    - THE `__CALCULATE_NEXT_STEP__` FUNCTION IS CALLED TO DETERMINE THE NEXT ACTION BASED ON THE CURRENT STATE AND THE SYMBOL READ FROM THE TAPE. THIS FUNCTION UPDATES THE TAPE CONTENT, STATE, AND TAPE HEAD POSITION.
#    - THE HUD IS UPDATED WITH INFORMATION ABOUT THE CURRENT STEP, STATE, TAPE INDEX, AND THE FREQUENCY OF CHARACTERS ON THE TAPE.
# 5. **RESULT GENERATION**:
#    AFTER THE SIMULATION LOOP COMPLETES (WHEN `STATE` EQUALS `END_STATE`), THE FINAL TAPE CONTENT IS COLLECTED AS A STRING. ANY TRAILING SPACES ARE REMOVED, AND THE RESULTING STRING IS THE OUTPUT OF THE UTM'S COMPUTATION.
# 6. **MAIN BLOCK**:
#    THE FUNCTION ALSO INCLUDES A MAIN BLOCK THAT HANDLES COMMAND-LINE ARGUMENTS. IT ALLOWS USERS TO SPECIFY THE INPUT TAPE, INSTRUCTIONS FILE, STARTING STATE, ENDING STATE, RENDERING OPTIONS, AND RENDERING SPEED. THE INPUT TAPE AND THE UTM'S RESULT ARE PRINTED TO THE CONSOLE AFTER THE COMPUTATION IS COMPLETE.
# IN SUMMARY, THE `UTM` FUNCTION SIMULATES THE OPERATION OF A UNIVERSAL TURING MACHINE BASED ON PROVIDED INSTRUCTIONS, AN INPUT TAPE, AND VARIOUS CONFIGURATION PARAMETERS. IT KEEPS TRACK OF THE UTM'S STATE AND TAPE CONTENT, OPTIONALLY DISPLAYS A VISUAL REPRESENTATION OF THE OPERATION, AND ENSURES THAT THE PROVIDED INSTRUCTIONS ADHERE TO THE EXPECTED FORMAT BEFORE EXECUTION.
def UTM(INSTRUCTIONS, TAPE, START_STATE, END_STATE, RENDER, SPEED):
    """THE `UTM` FUNCTION IS DESIGNED TO SIMULATE THE OPERATION OF A UNIVERSAL TURING MACHINE (UTM) BASED ON PROVIDED INSTRUCTIONS AND AN INPUT TAPE.
    - **PARAMETERS**:
        - `INSTRUCTIONS`: A SET OF TRANSITION RULES THAT DICTATE THE UTM'S BEHAVIOUR.
        - `TAPE`: THE INITIAL CONTENT OF THE TAPE, REPRESENTING THE INPUT.
        - `START_STATE`: THE INITIAL STATE OF THE UTM.
        - `END_STATE`: THE STATE IN WHICH THE UTM SHOULD HALT.
        - `RENDER`: A FLAG TO CONTROL WHETHER A VISUAL REPRESENTATION OF THE UTM'S OPERATION IS DISPLAYED.
        - `SPEED`: THE RENDERING SPEED, DETERMINING THE DELAY BETWEEN STEPS WHEN RENDERING IS ENABLED.
    - **VALIDATION**: THE FUNCTION VALIDATES THE FORMAT OF THE PROVIDED INSTRUCTIONS, ENSURING THEY ADHERE TO SPECIFIC RULES.
    - **DISPLAY**: OPTIONALLY, THE FUNCTION CAN DISPLAY A HEADS-UP DISPLAY (HUD) TO VISUALIZE THE UTM'S STATE, TAPE POSITION, AND CHARACTER FREQUENCIES.
    - **SIMULATION LOOP**:
        - THE CORE OPERATION OF THE UTM IS IMPLEMENTED IN A `WHILE` LOOP.
        - IT ITERATES UNTIL THE UTM'S CURRENT STATE MATCHES THE SPECIFIED END STATE.
        - DURING EACH ITERATION, IT INCREMENTS A STEP COUNTER AND CALCULATES THE NEXT STEP BASED ON THE CURRENT STATE AND TAPE SYMBOL.
    - **RESULT GENERATION**: AFTER THE SIMULATION LOOP ENDS, THE FUNCTION COLLECTS THE TAPE CONTENT AS A STRING, REMOVING ANY TRAILING SPACES.
    - **MAIN BLOCK**:
        - THE FUNCTION INCLUDES A MAIN BLOCK FOR PARSING COMMAND-LINE ARGUMENTS, ALLOWING USERS TO SPECIFY INPUT TAPE, INSTRUCTIONS, STATES, RENDERING OPTIONS, AND SPEED.
        - IT DISPLAYS THE INPUT TAPE AND THE UTM'S RESULT ON THE CONSOLE.
    IN SUMMARY, THE `UTM` FUNCTION SERVES AS A PYTHON IMPLEMENTATION OF A UNIVERSAL TURING MACHINE, PROVIDING A WAY TO SIMULATE ARBITRARY COMPUTATIONS USING SPECIFIED TRANSITION RULES AND INPUT TAPE."""
    ALLOWED_TAPE_MOVEMENTS = {'RIGHT': 1, 'LEFT': -1}
    TAPE = list(TAPE)
    STATE = START_STATE
    for INSTRUCTION in INSTRUCTIONS:
        for CASE in INSTRUCTIONS[INSTRUCTION]:
            ACTION = INSTRUCTIONS[INSTRUCTION][CASE]
            if len(ACTION['WRITE']) != 1:
                raise ValueError(f'INVALID CONFIG! USE ONE CHARACTER, INSTEAD OF "{ACTION["WRITE"]}"!')
            if ACTION['MOVE'] not in ALLOWED_TAPE_MOVEMENTS:
                raise ValueError(f'INVALID CONFIG! USE "RIGHT" OR "LEFT", NOT "{ACTION["MOVE"]}"!')
            if ACTION['NEXTSTATE'] not in INSTRUCTIONS and ACTION['NEXTSTATE'] != END_STATE:
                raise ValueError(f'INVALID CONFIG! STATE "{ACTION["NEXTSTATE"]}" NEEDS TO BE DEFINED!')

    # THE `__DISPLAY_HUD__` FUNCTION IS A HELPER FUNCTION WITHIN THE LARGER `UTM` FUNCTION THAT IS RESPONSIBLE FOR DISPLAYING A HEADS-UP DISPLAY (HUD). THIS HUD PROVIDES INFORMATION ABOUT THE CURRENT STATE OF THE UNIVERSAL TURING MACHINE (UTM) AND THE CONTENT OF ITS TAPE.
    # - **PURPOSE**: THE PRIMARY PURPOSE OF THE `__DISPLAY_HUD__` FUNCTION IS TO PROVIDE REAL-TIME FEEDBACK AND VISUALIZATION OF THE UTM'S OPERATION TO THE USER. IT ALLOWS USERS TO MONITOR THE UTM'S PROGRESS AS IT PROCESSES THE INPUT TAPE.
    # - **PARAMETERS**:
    #   - `INDEX`: THE CURRENT POSITION OF THE UTM'S TAPE HEAD ON THE TAPE.
    #   - `STEPS_COUNTER`: A COUNT OF THE NUMBER OF STEPS THE UTM HAS TAKEN.
    #   - `FORCE_RENDER`: AN OPTIONAL BOOLEAN PARAMETER THAT, IF SET TO `TRUE`, FORCES THE FUNCTION TO RENDER THE HUD REGARDLESS OF THE `RENDER` CONFIGURATION PARAMETER IN THE MAIN `UTM` FUNCTION.
    # - **HUD CONTENTS**: THE HUD DISPLAYS SEVERAL KEY PIECES OF INFORMATION:
    #     - `[CURRENT STEP]`: INDICATES THE CURRENT STEP OR ITERATION OF THE UTM.
    #     - `[CURRENT STATE]`: SHOWS THE CURRENT STATE OF THE UTM.
    #     - `[TAPE INDEX]`: DISPLAYS THE CURRENT POSITION OF THE UTM'S TAPE HEAD ON THE TAPE.
    #     - `[CHARACTER LIST]`: LISTS THE CHARACTERS PRESENT ON THE TAPE AND THEIR RESPECTIVE FREQUENCIES.
    # - **UPDATING THE DISPLAY**:
    #   - THE HUD IS UPDATED EACH TIME THE `__DISPLAY_HUD__` FUNCTION IS CALLED, PROVIDING REAL-TIME INFORMATION ABOUT THE UTM'S PROGRESS.
    #   - THE FUNCTION CLEARS THE CONSOLE SCREEN (USING THE `OS.SYSTEM("CLEAR")` COMMAND) TO REFRESH THE DISPLAY AND PREVENT CLUTTER.
    #   - IT THEN PRINTS THE CURRENT STEP, STATE, TAPE INDEX, AND CHARACTER LIST TO THE CONSOLE.
    # - **OPTIONAL RENDERING DELAY**: IF THE `SPEED` PARAMETER IN THE MAIN `UTM` FUNCTION IS SET, THE `__DISPLAY_HUD__` FUNCTION INCLUDES A BRIEF DELAY (IN SECONDS) USING `TIME.SLEEP(SPEED)`. THIS DELAY CONTROLS THE RENDERING SPEED OF THE HUD, ALLOWING USERS TO OBSERVE THE UTM'S OPERATION AT A COMFORTABLE PACE.
    # - **CONDITIONAL RENDERING**: THE `FORCE_RENDER` PARAMETER ALLOWS FOR CONDITIONAL RENDERING OF THE HUD, ENSURING THAT IT CAN BE DISPLAYED EVEN IF RENDERING IS TURNED OFF IN THE MAIN `UTM` FUNCTION. THIS IS USEFUL FOR PROVIDING PERIODIC UPDATES OR DEBUGGING INFORMATION.
    # - **USER INTERACTION**: BY DISPLAYING THE CURRENT STATE AND TAPE CONTENT, THE HUD ENABLES USERS TO FOLLOW THE UTM'S PROGRESS, TROUBLESHOOT ANY ISSUES, AND GAIN INSIGHTS INTO HOW THE MACHINE PROCESSES THE INPUT TAPE.
    # IN SUMMARY, THE `__DISPLAY_HUD__` FUNCTION IS A CRITICAL COMPONENT OF THE `UTM` IMPLEMENTATION, RESPONSIBLE FOR VISUALLY REPRESENTING THE UTM'S STATE AND TAPE CONTENT IN REAL-TIME. IT UPDATES THE CONSOLE DISPLAY WITH INFORMATION ABOUT THE CURRENT STEP, STATE, TAPE POSITION, AND CHARACTER FREQUENCIES, PROVIDING A VALUABLE TOOL FOR MONITORING AND UNDERSTANDING THE UTM'S OPERATION.
    def __DISPLAY_HUD__(INDEX, STEPS_COUNTER, FORCE_RENDER=False):
        """THE `__DISPLAY_HUD__` FUNCTION SERVES THE PURPOSE OF PROVIDING A REAL-TIME VISUAL REPRESENTATION OF THE UNIVERSAL TURING MACHINE'S (UTM) OPERATION.
        - **PARAMETERS**:
            - `INDEX`: REPRESENTS THE CURRENT POSITION OF THE TAPE HEAD ON THE INPUT TAPE.
            - `STEPS_COUNTER`: KEEPS TRACK OF THE NUMBER OF STEPS THE UTM HAS TAKEN.
            - `FORCE_RENDER`: AN OPTIONAL PARAMETER THAT ALLOWS FOR FORCED RENDERING OF THE HUD EVEN IF RENDERING IS TURNED OFF IN THE MAIN UTM FUNCTION.
        - **HUD CONTENTS**: THE HUD DISPLAYS ESSENTIAL INFORMATION, INCLUDING THE CURRENT STEP, THE CURRENT STATE OF THE UTM, THE TAPE HEAD'S POSITION ON THE TAPE, AND A LIST OF CHARACTERS ON THE TAPE ALONG WITH THEIR FREQUENCIES.
        - **DYNAMIC UPDATES**:
            - THE FUNCTION UPDATES THE HUD EVERY TIME IT IS CALLED, PROVIDING REAL-TIME FEEDBACK ON THE UTM'S PROGRESS.
            - IT CLEARS THE CONSOLE SCREEN TO MAINTAIN A CLEAN DISPLAY.
        - **RENDERING SPEED CONTROL**: IF SPECIFIED, THE FUNCTION INCLUDES A RENDERING DELAY TO CONTROL THE SPEED AT WHICH INFORMATION IS DISPLAYED, FACILITATING OBSERVATION OF THE UTM'S OPERATION.
        - **CONDITIONAL RENDERING**: THE `FORCE_RENDER` PARAMETER ALLOWS FOR ON-DEMAND RENDERING OF THE HUD, USEFUL FOR DEBUGGING OR PROVIDING PERIODIC UPDATES.
        - **USER INTERACTION**: THE HUD ENABLES USERS TO MONITOR THE UTM'S STATE, TAPE HEAD MOVEMENT, AND CHARACTER FREQUENCIES, AIDING IN UNDERSTANDING AND TROUBLESHOOTING THE UTM'S BEHAVIOR.
        IN SUMMARY, THE `__DISPLAY_HUD__` FUNCTION IS RESPONSIBLE FOR DYNAMICALLY RENDERING A HEADS-UP DISPLAY THAT OFFERS REAL-TIME INSIGHTS INTO THE UTM'S OPERATION, ENHANCING USER INTERACTION AND COMPREHENSION OF THE UTM'S PROCESSING OF THE INPUT TAPE."""
        if RENDER or FORCE_RENDER:
            os.system("clear")
            print(f'[CURRENT STEP]  {str(STEPS_COUNTER)}')
            print(f'[CURRENT STATE] {STATE}')
            print(f'[TAPE INDEX]    {str(INDEX)}')
            print('[CHARACTER LIST]')
            OCCURENCES = {}
            for CHARACTER in TAPE:
                if CHARACTER != ' ':
                    OCCURENCES[CHARACTER] = OCCURENCES.get(CHARACTER, 0) + 1
            for CHARACTER, OCCURRENCE in OCCURENCES.items():
                print(f'{OCCURRENCE}X: {CHARACTER}')
            if SPEED:
                time.sleep(SPEED)

    # THE `__CALCULATE_NEXT_STEP__` FUNCTION IS A CORE COMPONENT OF THE LARGER `UTM` IMPLEMENTATION. IT IS RESPONSIBLE FOR DETERMINING THE NEXT ACTION THAT THE UNIVERSAL TURING MACHINE (UTM) SHOULD TAKE BASED ON THE CURRENT STATE AND SYMBOL READ FROM THE INPUT TAPE. THE PRIMARY PURPOSE OF THE `__CALCULATE_NEXT_STEP__` FUNCTION IS TO COMPUTE THE NEXT STEP OR TRANSITION OF THE UTM ACCORDING TO THE PROVIDED TRANSITION RULES (INSTRUCTIONS).
    # - **PARAMETERS**:
    #   - `TAPE_INDEX`: REPRESENTS THE CURRENT POSITION OF THE TAPE HEAD ON THE INPUT TAPE.
    #   - `TAPE`: THE CONTENT OF THE INPUT TAPE.
    #   - `STATE`: THE CURRENT STATE OF THE UTM.
    # - **FUNCTION FLOW**: THE FUNCTION FIRST CHECKS WHETHER THE TAPE HEAD IS AT THE LEFTMOST END OF THE TAPE (INDEX `-1`). IF SO, IT INSERTS A BLANK SYMBOL (' ') AT THE BEGINNING OF THE TAPE TO ENSURE THAT THE TAPE IS INFINITE TO THE LEFT.
    #   - NEXT, IT CHECKS WHETHER THE TAPE HEAD HAS MOVED BEYOND THE RIGHT END OF THE TAPE. IF SO, IT APPENDS A BLANK SYMBOL (' ') TO THE END OF THE TAPE TO ENSURE THAT THE TAPE IS INFINITE TO THE RIGHT.
    #   - THE FUNCTION THEN DETERMINES THE ACTION TO BE TAKEN BASED ON THE CURRENT STATE AND THE SYMBOL READ FROM THE TAPE AT THE `TAPE_INDEX`.
    #   - THE ACTION INCLUDES:
    #     - WRITING A NEW SYMBOL TO THE TAPE AT THE CURRENT POSITION.
    #     - TRANSITIONING TO A NEW STATE.
    #     - MOVING THE TAPE HEAD LEFT OR RIGHT.
    #   - THE FUNCTION APPLIES THE DETERMINED ACTION TO UPDATE THE TAPE CONTENT, STATE, AND TAPE HEAD POSITION ACCORDINGLY.
    # - **HANDLING ALLOWED TAPE MOVEMENTS**: THE FUNCTION CHECKS WHETHER THE SPECIFIED TAPE MOVEMENT (LEFT OR RIGHT) IS ALLOWED. IF THE MOVEMENT IS NOT VALID, IT WOULD INDICATE AN ERROR IN THE UTM'S CONFIGURATION.
    # - **STATE TRANSITION**: THE UTM TRANSITIONS FROM ITS CURRENT STATE TO THE STATE SPECIFIED IN THE ACTION. THIS TRANSITION IS BASED ON THE INSTRUCTION ASSOCIATED WITH THE CURRENT STATE AND SYMBOL.
    # - **TAPE CONTENT MODIFICATION**: THE FUNCTION MODIFIES THE CONTENT OF THE TAPE AT THE CURRENT POSITION BY WRITING A NEW SYMBOL AS SPECIFIED IN THE ACTION.
    # - **TAPE HEAD MOVEMENT**: THE TAPE HEAD'S POSITION IS UPDATED BASED ON THE MOVEMENT SPECIFIED IN THE ACTION. FOR EXAMPLE, IF THE ACTION INSTRUCTS THE TAPE HEAD TO MOVE LEFT, IT DECREMENTS `TAPE_INDEX`. IF IT'S INSTRUCTED TO MOVE RIGHT, IT INCREMENTS `TAPE_INDEX`.
    # - **INFINITE TAPE HANDLING**: THE FUNCTION ENSURES THAT THE TAPE IS EFFECTIVELY INFINITE IN BOTH DIRECTIONS BY ADDING BLANK SYMBOLS TO THE TAPE AS NEEDED.
    # - **RESULT**: THE FUNCTION RETURNS THE UPDATED `TAPE_INDEX` TO INDICATE THE NEW POSITION OF THE TAPE HEAD AFTER THE STEP HAS BEEN EXECUTED.
    # IN SUMMARY, THE `__CALCULATE_NEXT_STEP__` FUNCTION PLAYS A PIVOTAL ROLE IN THE UTM'S OPERATION BY CALCULATING THE NEXT STEP BASED ON THE CURRENT STATE AND SYMBOL. IT APPLIES THE NECESSARY ACTIONS TO UPDATE THE TAPE CONTENT, STATE, AND TAPE HEAD POSITION, ENSURING THAT THE UTM CAN PROCESS INPUT TAPES ACCORDING TO THE SPECIFIED INSTRUCTIONS.
    def __CALCULATE_NEXT_STEP__(TAPE_INDEX):
        """THE PRIMARY PURPOSE OF THE `__CALCULATE_NEXT_STEP__` FUNCTION IS TO DETERMINE AND EXECUTE THE NEXT STEP IN THE OPERATION OF A UNIVERSAL TURING MACHINE (UTM) BASED ON ITS CURRENT STATE AND THE SYMBOL READ FROM THE INPUT TAPE.
            - **PARAMETERS**:
                - `TAPE_INDEX`: REPRESENTS THE CURRENT POSITION OF THE TAPE HEAD ON THE INPUT TAPE.
                - `TAPE`: THE CONTENT OF THE INPUT TAPE.
                - `STATE`: THE CURRENT STATE OF THE UTM.
            - **INFINITE TAPE HANDLING**: THE FUNCTION ENSURES THAT THE TAPE IS EFFECTIVELY INFINITE BY INSERTING BLANK SYMBOLS TO THE LEFT AND RIGHT IF THE TAPE HEAD APPROACHES ITS ENDS.
            - **ACTION DETERMINATION**: BASED ON THE CURRENT STATE AND THE SYMBOL READ FROM THE TAPE AT THE `TAPE_INDEX`, THE FUNCTION DETERMINES THE NEXT ACTION TO TAKE. THIS ACTION INCLUDES WRITING A NEW SYMBOL, TRANSITIONING TO A NEW STATE, AND MOVING THE TAPE HEAD LEFT OR RIGHT.
            - **STATE TRANSITION**: THE UTM TRANSITIONS TO A NEW STATE AS SPECIFIED IN THE DETERMINED ACTION. THIS STATE TRANSITION IS ESSENTIAL FOR THE UTM'S COMPUTATION.
            - **TAPE CONTENT MODIFICATION**: THE FUNCTION UPDATES THE TAPE'S CONTENT BY WRITING A NEW SYMBOL AT THE CURRENT POSITION, AS INSTRUCTED BY THE ACTION.
            - **TAPE HEAD MOVEMENT**: THE TAPE HEAD'S POSITION IS ADJUSTED ACCORDING TO THE SPECIFIED MOVEMENT IN THE ACTION, EITHER LEFT OR RIGHT.
            - **RESULT**: THE FUNCTION RETURNS THE UPDATED `TAPE_INDEX`, INDICATING THE NEW POSITION OF THE TAPE HEAD AFTER THE STEP HAS BEEN EXECUTED.
            IN SUMMARY, THE `__CALCULATE_NEXT_STEP__` FUNCTION IS A CRITICAL COMPONENT OF THE UTM'S OPERATION, RESPONSIBLE FOR MAKING DECISIONS ABOUT THE NEXT STEP BASED ON THE CURRENT STATE AND TAPE CONTENT. IT ENSURES THE PROPER EXECUTION OF THE UTM'S INSTRUCTIONS, ALLOWING IT TO PROCESS INPUT TAPES EFFECTIVELY."""
        if TAPE_INDEX == -1:
            TAPE.insert(0, ' ')
            TAPE_INDEX = 0
        if TAPE_INDEX == len(TAPE):
            TAPE.append(' ')
        nonlocal STATE
        ACTION_FOR_THIS_STATE = INSTRUCTIONS[STATE][TAPE[TAPE_INDEX]]
        TAPE[TAPE_INDEX] = ACTION_FOR_THIS_STATE['WRITE']
        STATE = ACTION_FOR_THIS_STATE['NEXTSTATE']
        TAPE_INDEX = TAPE_INDEX + ALLOWED_TAPE_MOVEMENTS.get(ACTION_FOR_THIS_STATE['MOVE'], 0)
        return TAPE_INDEX

    TAPE_INDEX = 0
    STEPS_COUNTER = 0
    __DISPLAY_HUD__(TAPE_INDEX, STEPS_COUNTER, FORCE_RENDER=True)
    while STATE != END_STATE:
        STEPS_COUNTER += 1
        TAPE_INDEX = __CALCULATE_NEXT_STEP__(TAPE_INDEX)
        __DISPLAY_HUD__(TAPE_INDEX, STEPS_COUNTER)
    __DISPLAY_HUD__(TAPE_INDEX, STEPS_COUNTER, FORCE_RENDER=True)
    return ''.join(TAPE).replace(' ', '')

# THE `__MAIN__` FUNCTION SERVES AS THE ENTRY POINT FOR THE PROGRAM. IT'S WHERE THE PROGRAM EXECUTION BEGINS WHEN THE SCRIPT IS RUN.
# - **COMMAND-LINE ARGUMENT PARSING**: USUALLY, THE `__MAIN__` FUNCTION STARTS BY DEFINING AND PARSING COMMAND-LINE ARGUMENTS USING LIBRARIES LIKE `ARGPARSE`. THIS ALLOWS USERS TO PROVIDE INPUT AND CONFIGURATION OPTIONS WHEN RUNNING THE SCRIPT.
# - **ARGUMENT DEFINITION**: WITHIN THE `__MAIN__` FUNCTION, YOU WOULD DEFINE THE COMMAND-LINE ARGUMENTS THAT YOUR SCRIPT ACCEPTS. THESE ARGUMENTS CAN INCLUDE OPTIONS LIKE INPUT FILES, CONFIGURATION PARAMETERS, AND FLAGS.
# - **ARGUMENT PARSING**: THE FUNCTION WOULD THEN USE THE `ARGPARSE` LIBRARY OR SIMILAR TOOLS TO PARSE THE PROVIDED COMMAND-LINE ARGUMENTS AND STORE THEIR VALUES IN VARIABLES FOR USE IN THE REST OF THE PROGRAM.
# - **FILE AND DATA LOADING**: AFTER PARSING THE COMMAND-LINE ARGUMENTS, THE `__MAIN__` FUNCTION WOULD TYPICALLY INCLUDE CODE TO LOAD DATA FROM FILES, SUCH AS READING INSTRUCTIONS FROM A JSON FILE OR LOADING AN INITIAL INPUT TAPE.
# - **FUNCTION INVOCATION**: THE `__MAIN__` FUNCTION WOULD CALL OTHER FUNCTIONS OR METHODS NEEDED TO PERFORM THE MAIN LOGIC OF THE PROGRAM. IN THE CASE OF THE PROVIDED CODE, THIS MIGHT INCLUDE CALLING THE `UTM` FUNCTION WITH THE LOADED DATA AND CONFIGURATION PARAMETERS.
# - **RESULT HANDLING AND OUTPUT**: ONCE THE UTM OR OTHER FUNCTIONS HAVE EXECUTED, THE `__MAIN__` FUNCTION MAY HANDLE THE RESULTS OR GENERATED OUTPUT. THIS COULD INVOLVE PRINTING RESULTS TO THE CONSOLE, SAVING DATA TO FILES, OR ANY OTHER DESIRED OUTPUT ACTIONS.
# - **ERROR HANDLING**: ERROR HANDLING AND EXCEPTION HANDLING WOULD BE INCLUDED IN THE `__MAIN__` FUNCTION TO MANAGE ANY UNEXPECTED ISSUES THAT MAY ARISE DURING EXECUTION.
# - **PROGRAM FLOW CONTROL**: DEPENDING ON THE LOGIC OF YOUR PROGRAM, THE `__MAIN__` FUNCTION MAY CONTROL THE OVERALL FLOW OF THE PROGRAM, INCLUDING LOOP STRUCTURES OR CONDITIONALS TO HANDLE DIFFERENT SCENARIOS.
# - **CLEANUP AND FINALIZATION**: FINALLY, THE `__MAIN__` FUNCTION CAN INCLUDE CLEANUP CODE, SUCH AS CLOSING FILES OR RELEASING RESOURCES, BEFORE THE PROGRAM EXITS.
# IN SUMMARY, THE `__MAIN__` FUNCTION IN A PYTHON SCRIPT TYPICALLY SERVES AS THE ENTRY POINT FOR THE PROGRAM, HANDLING COMMAND-LINE ARGUMENT PARSING, DATA LOADING, INVOKING OTHER FUNCTIONS, MANAGING RESULTS, ERROR HANDLING, PROGRAM FLOW CONTROL, AND CLEANUP. IT ENCAPSULATES THE OVERALL LOGIC AND EXECUTION FLOW OF THE SCRIPT.
def MAIN():
    """THE `__MAIN__` FUNCTION SERVES AS THE STARTING POINT FOR THE PROGRAM'S EXECUTION WHEN THE SCRIPT IS RUN DIRECTLY.
    - **COMMAND-LINE ARGUMENT PARSING**: IT OFTEN BEGINS BY DEFINING AND PARSING COMMAND-LINE ARGUMENTS USING LIBRARIES LIKE `ARGPARSE` TO FACILITATE USER INPUT AND CONFIGURATION.
    - **ARGUMENT HANDLING**: THE FUNCTION DEFINES AND MANAGES THE SCRIPT'S COMMAND-LINE ARGUMENTS, ALLOWING USERS TO PROVIDE INPUT AND CONFIGURE THE PROGRAM.
    - **FILE AND DATA LOADING**: TYPICALLY, THE `__MAIN__` FUNCTION LOADS DATA FROM FILES, SUCH AS READING INPUT DATA, CONFIGURATION FILES, OR EXTERNAL RESOURCES.
    - **FUNCTION INVOCATION**: IT CALLS OTHER FUNCTIONS OR METHODS REQUIRED TO EXECUTE THE MAIN LOGIC OF THE PROGRAM, PASSING THE LOADED DATA AND CONFIGURATION PARAMETERS.
    - **RESULT HANDLING AND OUTPUT**: AFTER THE MAIN LOGIC HAS EXECUTED, THE `__MAIN__` FUNCTION MAY HANDLE AND DISPLAY THE RESULTS, INCLUDING PRINTING OUTPUT OR SAVING DATA AS NEEDED.
    - **ERROR HANDLING**: IT INCLUDES ERROR HANDLING AND EXCEPTION MANAGEMENT TO GRACEFULLY HANDLE UNEXPECTED ISSUES THAT MAY ARISE DURING EXECUTION.
    - **PROGRAM FLOW CONTROL**: DEPENDING ON THE PROGRAM'S DESIGN, THE `__MAIN__` FUNCTION MAY CONTROL THE OVERALL FLOW OF THE PROGRAM, DIRECTING IT THROUGH LOOPS OR CONDITIONALS.
    - **CLEANUP AND FINALIZATION**: BEFORE THE PROGRAM EXITS, THE FUNCTION MAY PERFORM CLEANUP TASKS, SUCH AS CLOSING FILES, RELEASING RESOURCES, OR FINALIZING OPERATIONS.
    IN SUMMARY, THE `__MAIN__` FUNCTION IS THE CENTRAL COMPONENT OF A PYTHON SCRIPT, ORCHESTRATING THE PROGRAM'S EXECUTION FLOW, HANDLING INPUT AND CONFIGURATION, EXECUTING THE MAIN LOGIC, MANAGING RESULTS, AND ENSURING PROPER ERROR HANDLING AND CLEANUP."""
    PARSER = argparse.ArgumentParser(description='A CLEAN AND SIMPLE IMPLEMENTATION OF A UNIVERSAL TURING MACHINE.')
    PARSER.add_argument('-b', '--begin-state', type=str, action='store', default='Q0', help='BEGIN STATE')
    PARSER.add_argument('-e', '--end-state', type=str, action='store', default='QDONE', help='END STATE')
    PARSER.add_argument('-s', '--speed', type=float, action='store', default=0.01, help='RENDERING SPEED IN SECONDS')
    PARSER.add_argument('-d', '--display', action='store_true', default=False, help='SHOW HEADS-UP-DISPLAY')
    REQUIRED_ARGS = PARSER.add_argument_group('REQUIRED ARGUMENTS')
    REQUIRED_ARGS.add_argument('-c', '--config', type=str, action='store', default=False, required=True, help='THE INSTRUCTIONS FILE')
    REQUIRED_ARGS.add_argument('-t', '--tape', type=str, action='store', default=False, required=True, help='INPUT TAPE')
    ARGS = PARSER.parse_args()
    with open(ARGS.config, 'r', encoding='utf-8') as CONFIG_FILE:
        GIVEN_INSTRUCTIONS = json.load(CONFIG_FILE)
    RESULT = UTM(GIVEN_INSTRUCTIONS, ARGS.tape, ARGS.begin_state, ARGS.end_state, ARGS.display, ARGS.speed)
    print(f'[INPUT] {ARGS.tape}')
    print(f'[OUTPUT] {RESULT}')

if __name__ == '__main__':
    MAIN()
